{"version":3,"sources":["services/contactsApi.tsx","App.tsx","store.tsx","serviceWorker.ts","index.tsx"],"names":["contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","contacts","query","providesTags","contact","id","addContact","mutation","url","method","body","invalidatesTags","updateContact","rest","deleteContact","useContactsQuery","useContactQuery","useAddContactMutation","useUpdateContactMutation","useDeleteContactMutation","ContactDetail","data","JSON","stringify","undefined","AddContact","refetch","contactUpdate","addHandler","a","updateHandler","deleteHandler","onClick","App","error","isLoading","isFetching","isSuccess","console","log","className","map","name","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.20384b91.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { Contact } from \"../models/contact.model\";\n\nexport const contactsApi = createApi({\n  reducerPath: \"contactsApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:3006/\" }),\n  tagTypes: ['Contact'],\n  endpoints: (builder) => ({\n    contacts: builder.query<Contact[], void>({\n      query: () => \"/contacts\",\n      providesTags: ['Contact']\n    }),\n    contact: builder.query<Contact, string>({\n      query: (id) => `/contacts/${id}`,\n      providesTags: ['Contact']\n    }),\n    addContact: builder.mutation<void, Contact>({\n      query: (contact) => ({\n        url: \"/contacts\",\n        method: \"POST\",\n        body: contact,\n      }),\n      invalidatesTags: ['Contact']\n    }),\n    updateContact: builder.mutation<void, Contact>({\n      query: ({ id, ...rest }) => ({\n        url: `/contacts/${id}`,\n        method: \"PUT\",\n        body: rest,\n      }),\n      invalidatesTags: ['Contact']\n    }),\n    deleteContact: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/contacts/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: ['Contact']\n    }),\n  }),\n});\n\nexport const {\n  useContactsQuery,\n  useContactQuery,\n  useAddContactMutation,\n  useUpdateContactMutation,\n  useDeleteContactMutation,\n} = contactsApi;\n","import React from 'react';\nimport './App.css';\nimport { useContactsQuery, useContactQuery, useAddContactMutation, useUpdateContactMutation, useDeleteContactMutation } from './services/contactsApi';\n\nfunction App() {\n  const { data, error, isLoading, isFetching, isSuccess } = useContactsQuery();\n  console.log(data);\n  return (\n    <div className=\"App\">\n      <h1>React Redux Toolkit RTK Query</h1>\n      {isLoading && <h2>...Loading</h2>}\n      {isFetching && <h2>...isFetching</h2>}\n      {error && <h2>Something went wrong</h2>}  \n      {isSuccess && (\n        <div>\n          {data?.map(contact => {\n            return <div className=\"data\" key={contact.id}>\n              <span>{contact.name}</span>\n              <span><ContactDetail id={ contact.id} /></span>\n            </div>\n          })}\n          <div> <AddContact /> </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport const ContactDetail = ({ id }:{id:string}) => {\n  const { data } = useContactQuery(id);\n  return (\n    <pre>{ JSON.stringify(data, undefined, 2)}</pre>\n  )\n}\n\nexport const AddContact = ()=>{\n  const [addContact] = useAddContactMutation();\n  const [updateContact] = useUpdateContactMutation();\n  const [deleteContact] = useDeleteContactMutation();\n  const {refetch} = useContactsQuery();\n\n  const contact = {\n    \"id\": \"3\",\n    \"name\": \"Shubham\",\n    \"email\": \"shubham@email.com\"\n  }\n\n  const contactUpdate = {\n    \"id\": \"3\",\n    \"name\": \"Shubham udpate\",\n    \"email\": \"shubham@email.com\"\n  }\n\n  const addHandler = async()=>{\n    await addContact(contact);\n    // refetch();\n  }\n\n  const updateHandler = async()=>{\n    await updateContact(contactUpdate);\n  }\n\n  const deleteHandler = async()=>{\n    await deleteContact(contact.id);\n  }\n\n  return(\n    <>\n      <button onClick={addHandler}>Add Contact </button>\n      <button onClick={updateHandler}>Update Contact </button>\n      <button onClick={deleteHandler}>Delete Contact </button>\n    </>\n  )\n} \n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { contactsApi } from \"./services/contactsApi\";\n\nexport const store = configureStore({\n    reducer: {\n        // Add the generated reducer as a specific top-level slice\n        [contactsApi.reducerPath]: contactsApi.reducer\n    },\n    // Adding the api middleware enables caching, invalidation, polling,\n    // and other useful features of `rtk-query`.\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().concat(contactsApi.middleware),\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}